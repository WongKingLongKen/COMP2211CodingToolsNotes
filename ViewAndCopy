View
A view is a new array that looks at the same data as the original array
Changes made to the view will affect the original array since they share the same data in memory
Views are often created through assignment, slicing or certain functions like numpy.reshape()
They are memory-efficient because they do not require additional space for the data
Copy
A copy is a new array that contains a separate copy of the data from the original array
Changes made to the copy do not affect the original array, as they have independent data in memory
You can create a copy using the .copy() method of NumPy, or by using integer array indexing or Boolean array indexing. Integer array indexing and Boolean array indexing are referred to as fancy array indexing
Copies consume more memory since they store their own data

Please look at the example below to see how these ideas work.
 
Program
 
import numpy as np
 
a = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])
b = a                   # b is a view of a
# numpy.shares_memory(a,b): Determine if two arrays, a and b, share memory.
print('Array b shares memory with array a:', np.shares_memory(b,a))
b[0,1] = 999            # This changes a to [[1 999 3 4][5 6 7 8]]
print('b:', b)
print('a:', a)
print('------')
 
a = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])
c = a[0:1, 1:3]         # c is a view of a
print('Array c shares memory with array a:', np.shares_memory(c,a))
c[0,0] = 1000           # This changes a to [[1 1000 3 4][5 6 7 8]]
print('c:', c)
print('a:', a)
print('------')
 
a = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])
d = a[[0,1],[0,1]]      # d is a copy of a, since we perform integer array indexing
print('Array d shares memory with array a:', np.shares_memory(d,a))
d[0] = 1001             # This does not change a
print('d:', d)
print('a:', a)
print('------')
 
a = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])
e = a[a <= 2]           # e is a copy of a, since we perform boolean array indexing
print('Array e shares memory with array a:', np.shares_memory(e,a))
e[0] = 1002             # This does not change a
print('e:', e)
print('a:', a)
 
# How to make a make a copy?
 
a = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])
f = a.copy()            # Now, f is a copy of a
print('Array f shares memory with array a:', np.shares_memory(f,a))
f[0,1] = 999            # This does not change a
print('f:', f)
print('a:', a)
print('------')
 
a = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])
g = a[0:1, 1:3].copy()  # Now, g is a copy of a
print('Array g shares memory with array a:', np.shares_memory(g,a))
g[0,0] = 1000           # This does not change a
print('g:', g)
print('a:', a)
print('------')
 
Output
 
Array b shares memory with array a: True
b: [[  1 999   3   4]
[  5   6   7   8]]
a: [[  1 999   3   4]
[  5   6   7   8]]
------
Array c shares memory with array a: True
c: [[1000    3]]
a: [[   1 1000    3    4]
[   5    6    7    8]]
------
Array d shares memory with array a: False
d: [1001    6]
a: [[1 2 3 4]
[5 6 7 8]]
------
Array e shares memory with array a: False
e: [1002    2]
a: [[1 2 3 4]
[5 6 7 8]]
Array f shares memory with array a: False
f: [[  1 999   3   4]
[  5   6   7   8]]
a: [[1 2 3 4]
[5 6 7 8]]
------
Array g shares memory with array a: False
g: [[1000    3]]
a: [[1 2 3 4]
[5 6 7 8]]
------
