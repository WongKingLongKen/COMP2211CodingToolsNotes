Data Science and AI
Label encoding and one-hot encoding
link: https://medium.com/@PatHuang/%E5%88%9D%E5%AD%B8python%E6%89%8B%E8%A8%98-3-%E8%B3%87%E6%96%99%E5%89%8D%E8%99%95%E7%90%86-label-encoding-one-hot-encoding-85c983d63f87

```
def compute_centroids(abundance_matrix, labels):
    """
    Computes the centroids of clusters based on assigned labels.

    You may consider using np.arange https://numpy.org/doc/stable/reference/generated/numpy.arange.html
    You may consider using np.expand_dims https://numpy.org/doc/stable/reference/generated/numpy.expand_dims.html
    You may consider using np.sum https://numpy.org/doc/stable/reference/generated/numpy.sum.html
    You may consider using np.matmul https://numpy.org/doc/stable/reference/generated/numpy.matmul.html

    Parameters:
    abundance_matrix: A 2D numpy array of shape (num_cells, num_proteins) representing protein abundance in cells.
    labels: An 1D numpy array of shape (num_cells,) indicating the cluster assigned to each cell.

    Returns:
    centroids: A 2D numpy array of shape (num_clusters, num_proteins) representing the new centroids of each cluster.
    """

    ### Your code goes here ###
    num_cells, num_proteins = abundance_matrix.shape

    num_clusters = np.max(labels) + 1
    one_hot_labels = np.eye(num_clusters)[labels] # one_hot_labels (num_cells, num_clusters)
    sum_abundance = np.matmul(one_hot_labels.transpose(), abundance_matrix) # sum_abundance (num_clusters, num_proteins)
    num_points = np.expand_dims(np.sum(one_hot_labels, axis=0), axis=0).transpose() # (1, num_clusters) -> (num_clusters, 1) -> broadcasting (num_clusters, num_proteins)
    centroids = sum_abundance / num_points
    return centroids
    ### Your code ends here ###


if __name__ == "__main__":
    example_array = np.array([[1, 2], [3, 4]])
    example_labels = np.array([0, 0])
    result = compute_centroids(abundance_matrix=example_array, labels=example_labels)
    print(result)
    # You are expected to get [[2,3]]
```
